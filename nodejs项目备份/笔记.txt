项目：
	1. 定义数据字典(数据库设计) | api 请求方式
		banner：	[
				{ 
					"_id" : xx, 
					"title" : "1", 
					"sub_title" : "1", 
					"banner" : "xxxx", 
					"time":234234,
					"detail" : { 
						"auth" : "", 
						"content" : "<p>xxx<p>", 
						"icon" : "/upload/banner/9d4083b4f1d28a6c0fb4c463526790eb.jpg" 
					},
				}
			]
		product: home/follow/column
			{ 
				"_id" : xx, 
				"title" : "1_", 
				"des" : "2", 
				"time":234234,
				"detail" : { 
					"auth" : "4", 
					"content" :"<p>3</p>", 
					"icon" : "/upload/user/xxx.jpg" 
				} 
			}
		user:	
			{ 
				"_id" : xx, 
				"username" : "alex", 
				"password" : "alex123", 
				"follow" : "100", 
				"fans" : "200", 
				"nikename" : "九叔_", 
				"icon" : "/upload/968a3b7218ee744931276a64c9b7ea01.png", 
				"time" : 1551620448550 
			}
		super:
			{ 
				"_id" : xx, 
				"username" : "admin", 
				"password" : "admin123", 
				"icon" : "/img/avatar-5.jpg" 
			}
	2. 素材准备(静态页面模板用户端|管理端)
	3. 搭建服务器|配置环境
	4. 处理 http请求，拿到数据，后端渲染页面，前端制作API
	5. 项目目录规划

		   bin  |-
		   		   www 启动文件
		   utils|- 全局公共
		   		|- douban|mgd|mysql
		   config 全局配置
		   		|- global (_page,_limit,q,upload...)
		   		|- server (local,http,https)
		   public 资源托管
		   		|-admin 管理端
		   		|-template 用户端
		   		|-upload
		   			|- banner|product|user
		   			|- product
		   				|- home|follow|column
		   routes 子服务，路由
		   		admin 管理端
		   			|- feedback
		   				|- success|error
		   			|- product
		   				|- add|del|check
		   			|- banner
		   				|- add|del|check
		   			|- user
		   				|- add|del|check
		   			|- home| product|banner|user
		   			|- islogin | login | reg | logout
		   		api 用户端
		   			|- product (home/follow/column) | banner | user | login | reg | logout
		   		proxy 代理
		   		...
		   views 管理端模板 
		   	 	|- feedback
		   				|- success|error|app_error
		   		|- ... 结构同 admin 管理端
		   	 	|- common
		   	 		|- header|footer|slider|crumb|toolbar|paging

	
	7. 客户端 api 生成，api文档

		https://www.easyapi.com 在线

		密码加密: bcrypt
			加密： var hash = bcrypt.hashSync(用户传过来的明文密码, 加盐数); 
			校验:  bcrypt.compareSync(用户传过来的明文密码, hash); // true|false

-----------------------------------------------------------------


RESTful API
	在Restful之前的操作：

		增 POST /user/save POST 新增用户
		删 GET|POST /user/delete?id=xx  删除用户信息
		改 POST /user/update POST 修改用户信息
		查 GET /user/query/1   根据用户id查询用户数据

	RESTful风格：
		增 POST /user  地址栏非地址栏中包含数据
		删 DELETE /user/1 | user?id=1 根据ID删除用户信息
		改 PUT|PATCH /user body中包含数据 PUT覆盖修改 PATCH局部修改
		查 GET /user | /user/1 | /user?id=1 GET  根据用户id查询用户数据 没有id查询所有 /1 返对象 id=1 返回数组>对象
		
			分页	_page 第几页， _limit一页多少条
				GET /user?_page=7  不传递默认0页
				GET /user?_page=7&_limit=20 不传递默认10条
			排序 _sort设定排序的字段 _order设定排序的方式（默认升序）
				GET /user?_sort=key&_order=asc
				GET /user/1/comments?_sort=votes&_order=asc
				GET /user?_sort=title,views&_order=desc,asc 	多个字段排序
			任意切片数据 _start 开始不包含  _end 结束包含
				GET /users?_start=20&_end=30
				GET /user/1/comments?_start=20&_end=30
				GET /user/1/comments?_start=20&_limit=10
			全文检索	GET /user?q=九哥
-------------------------------------------------------------------
nodejs->mysql

	mysql

		关系数据库(二维表(表头))
			数据库：需要安装服务
				服务：
					a) 安装wamp 开启 mysql服务
					b) 安装mysql 开启服务
			库操作：
				客户端：软件操作(UI工具)
					wamp的客户端是phpmyadmin
					navicat 收费
					nodeJs(后台管理程序),依赖mysql库
			链接库：
				wamp\mysql
				c:P..G..\mysql
			库操作  编码方式 UUC
				建|删 库(目录)
				建:	CREATE DATABASE  `2017-12-6` DEFAULT CHARACTER SET armscii8 COLLATE armscii8_general_ci;
				建|删|改 表(文件)
					创建表头(字段头)
					CREATE TABLE  `2017-12-6`.`user` (
					`name` VARCHAR( 32 ) NOT NULL ,
					`age` INT( 3 ) NOT NULL ,
					`address` VARCHAR( 128 ) NOT NULL
					) ENGINE = INNODB
			表操作	增删改查
				增：
					INSERT INTO 表 (字段列表) VALUES(值列表)
					INSERT INTO user (name,age,address) VALUES('苏菲',38,'')
				删:
					DELETE FROM 表 WHERE 字段名=值
					DELETE FROM user WHERE name='alex'
				改:
					UPDATE 表 SET 字段名=值 WHERE 字段名=值
					UPDATE user set name='sufei' WHERE name='苏菲'
				查:
					SELECT ? FROM 表
					SELECT * FROM user  查所有

-------------------------------------------------------------------


代理

	
	代理: 
		接口文档： https://www.cnblogs.com/e-cat/p/8656040.html
		豆瓣:
			hostname:'douban.uieee.com',//主机名
		    port: 443,//端口
		    path:'/v2/movie/top250?start=3&count=1',
		    method:'get'

		数据代理proxy:		request请求 抓取异步数据
		  options={
		    hostname:'api.douban.com',
		    port:443,
		    path:'/v2/movie/top250?count='+req.query.count,
		    method:'GET'
		  };

		  发送http[s]请求

		  http[s].request(配置项,回调(响应对象resHttp))	返回请求对象reqHttp
		  	resHttp 响应对象
		    resHttp.statusCode 状态码  200 OK
		    resHttp.headers 获取响应头信息
		    resHttp.setEncoding('utf-8') 设置编码方式
		    resHttp.on('data/end',fn)  ->send给前端
		  });

		  reqHttp 请求对象
		  reqHttp.on('error',(err)=>{console.log(err)});	监听请求失败信息
		  reqHttp.end();请求结束


-------------------------------------------------------------------

socket.io 

		场景：
			Web领域的实时推送技术，也被称作Realtime技术。这种技术要达到的目的是让用户不需要刷新浏览器就可以获得实时更新。它有着广泛的应用场景，比如在线聊天室、在线客服系统、评论系统、WebIM等。
		原理：
			双向通信,前端H5api （WebSocket） + 后端net模块
		API:
			cn:
				https://www.w3cschool.cn/socket/socket-k49j2eia.html
			en:
				https://socket.io/

		服务端socket环境：

			const app = express(); 创建express应用
			const server = require('http').Server|createServer(app);//创建web服务器,集成app应用 Server(fn|obj)==createServer(fn|obj)
			const io = require('socket.io')(server);//创建io,集成到server服务
			server.listen(3000, () => {});
			require('./mod/chat-server')(io);

		服务端配置: 配合express生成器
			
			修改www:
				const SOCKETIO = require('socket.io');//创建socket实例
				const io = SOCKETIO.listen(server);//监听http实例，未来3000端口下的http请求，会触发socket
				module.export = io;
					注意： www 不热重启，不检查

		客户端配置:
			html里面引入:
				<script src="/socket.io/socket.io.js"></script>
				连接服务器：socket = io('http://localhost:3000');

		服务端主动推送到客户端:
			let io = require('../../../bin/www'); require要在需要时再引入
		    io.emit('mess_type',{data:'服务端的推送数据')//推送

		    客户端订阅
		    socket.on('mess_type',(data)=>{
				console.log('首页_客户端收到',data)
			})

